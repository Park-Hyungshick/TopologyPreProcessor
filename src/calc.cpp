 /* This C++ file created with the help of GiNaC package
  * by comcon1.
  * Erg Research Group. Apr, 2007.
  */

 // DIHEDRAL ESTIMATION..OK!
 // VALENCE ANGLE ESTIMATIONS...OK!

#include "calc.hpp"
namespace tpp {

double __CALC_DIH(int i, const t_point& v1, const t_point& v2, const t_point& v3, const t_point& v4) throw (t_exception) {
  double x1=v1(0),x2=v2(0),x3=v3(0),x4=v4(0),
         y1=v1(1),y2=v2(1),y3=v3(1),y4=v4(1),
         z1=v1(2),z2=v2(2),z3=v3(2),z4=v4(2),result,sign;
 // non-collinearity check | zero-vectors check here also
  if (( (fcmp((x2-x1)*(y3-y2)) == (x3-x2)*(y2-y1)) &&
        (fcmp((x2-x1)*(z3-z2)) == (x3-x2)*(z2-z1)) &&
        (fcmp((y2-y1)*(z3-z2)) == (y3-y2)*(z2-z1)) ) ||
      ( (fcmp((x3-x2)*(y4-y3)) == (x4-x3)*(y3-y2)) &&
        (fcmp((x3-x2)*(z4-z3)) == (x4-x3)*(z3-z2)) &&
        (fcmp((y3-y2)*(z4-z3)) == (y4-y3)*(z3-z2)) )
      )  {
    if (!i) {
      t_input_params params;
      PARAM_ADD(params, "procname", "__CALC_DIH");
      PARAM_ADD(params, "error", "invalid_dihedral");
      throw t_exception("Some atoms formed dihedral angles lay on the same line.", params);
    } else if ((i<13)&&(i>0)) {
      return 0;
    } else {
      BOOST_ERROR("Bad run. Check coordinates.");
    }
  } 
// right- or left- vector set
  sign = y3*x2*z4-x4*y3*z2+y4*x1*z3-x1*z3*y2+x3*y2*z1-y3*x2*z1-x3*y1*z2+y3*x1*z2+x4*y3*z1-x2*z4*y1-y4*x2*z3-y3*x1*z4-x4*y2*z1+x4*y1*z2-y4*x1*z2-x3*y4*z1+x1*z4*y2+y4*x2*z1-x3*z4*y2+x3*y4*z2-x4*z3*y1+x2*z3*y1+x3*z4*y1+x4*z3*y2;
  switch (i) {
   case  0: result = acos((x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)); break;
   case  1: result = -(-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*(2*x2*z3*z2-2*(y3*y3)*x2-2*x2*y2*y1-2*x3*(y2*y2)+2*(y3*y3)*x1-2*x3*y3*y1+2*x2*z3*z1+2*x1*(z2*z2)-2*x2*z2*z1+2*x3*y3*y2+2*x3*z3*z2+2*y3*x2*y1+2*x3*y2*y1+2*x1*(y2*y2)-2*x2*(z3*z3)+2*y3*x2*y2-4.0*y3*x1*y2+2*x1*(z3*z3)-2*x3*z3*z1-2*x3*(z2*z2)+2*x3*z2*z1-4.0*x1*z3*z2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)+pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(x2*z3*z2-(y3*y3)*x2-y4*x2*y2-2*x4*z3*z2-x3*(y2*y2)+x2*z4*z3+x4*(z3*z3)+x3*z4*z2+x3*y4*y2+y4*y3*x2+x4*(y2*y2)+x3*y3*y2+x3*z3*z2-x3*z4*z3+x4*(z2*z2)-x2*(z3*z3)+x4*(y3*y3)+y3*x2*y2-x2*z4*z2-x3*y4*y3-x3*(z2*z2)-2*x4*y3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5))*pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5); break;
   case  2: result = -(-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*(2*y3*x2*x1-4.0*z3*y1*z2+2*z3*y2*z1-2*y2*z2*z1-2*x2*x1*y2+2*(x2*x2)*y1+2*y1*(z2*z2)+2*z3*y2*z2-2*(x3*x3)*y2-4.0*x3*x2*y1-2*(z3*z3)*y2-2*y3*(x2*x2)+2*y3*z3*z2+2*(x3*x3)*y1+2*x3*x2*y2+2*(z3*z3)*y1-2*y3*z3*z1+2*x3*x1*y2-2*x3*y3*x1+2*x3*y3*x2-2*y3*(z2*z2)+2*y3*z2*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)+pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(-z4*y2*z2-x4*x3*y3+y4*(z3*z3)+y3*z4*z2-2*y4*z3*z2-x4*x2*y2+z4*z3*y2+(x3*x3)*y4+x4*y3*x2+z3*y2*z2-(x3*x3)*y2-(z3*z3)*y2-y3*(x2*x2)+y3*z3*z2+x3*x2*y2-2*x3*y4*x2-y3*z4*z3+y4*(z2*z2)+y4*(x2*x2)+x3*y3*x2-y3*(z2*z2)+x4*x3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5))*pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5); break;
   case  3: result = -(pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(-z3*(y2*y2)+x4*x3*z2-2*x3*x2*z4+y4*y3*z2-(x2*x2)*z3+(x3*x3)*z4+(y3*y3)*z4+y3*y2*z2+x4*x2*z3+x3*x2*z2+y3*z3*y2-(x3*x3)*z2-(y3*y3)*z2-x4*x3*z3+z4*(y2*y2)-y4*y3*z3+x3*x2*z3-x4*x2*z2+y4*z3*y2-2*y3*z4*y2+(x2*x2)*z4-y4*y2*z2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)*(-2*z3*(y2*y2)-4.0*x3*x2*z1+2*y3*y1*z2-4.0*y3*y2*z1+2*(y3*y3)*z1+2*x3*x1*z2+2*(x3*x3)*z1-2*(x2*x2)*z3+2*x2*x1*z3-2*y3*z3*y1+2*y3*y2*z2+2*x3*x2*z2+2*y3*z3*y2-2*(x3*x3)*z2-2*(y3*y3)*z2-2*x2*x1*z2+2*z3*y2*y1-2*x3*x1*z3-2*y2*y1*z2+2*x3*x2*z3+2*(x2*x2)*z1+2*(y2*y2)*z1))*pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5); break;
   case  4: result = -pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5)*((-x4*y2*y1+2*(y3*y3)*x2+x4*z3*z2-2*x3*y4*y1-2*x2*z4*z3-x4*(z3*z3)-(y3*y3)*x1+x3*z4*z2+x3*y4*y2+2*y4*x2*y1+x3*y3*y1-x1*z4*z2+x4*z3*z1-2*y4*y3*x2-2*x2*z3*z1-2*x3*z4*z1-2*x3*y3*y2+y4*y3*x1-y4*x1*y2-x4*z2*z1-2*x3*z3*z2-2*y3*x2*y1+x3*y2*y1+x3*z4*z3+2*x2*(z3*z3)-x4*(y3*y3)+y3*x1*y2-x1*(z3*z3)+x3*y4*y3+x4*y3*y1+x1*z4*z3+x3*z3*z1+x3*z2*z1+2*x2*z4*z1+x1*z3*z2+x4*y3*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(2*(y3*y3)*x2+2*x4*z3*z2-4.0*x2*z4*z3+2*x4*z4*z3-2*x4*(z3*z3)+2*x3*z4*z2+2*x3*y4*y2+2*x4*y4*y3-4.0*y4*y3*x2+2*(y4*y4)*x2+2*x2*(z4*z4)-2*x3*y3*y2-2*x3*z3*z2+2*x3*z4*z3-2*x3*(z4*z4)-2*x4*y4*y2-2*x4*z4*z2+2*x2*(z3*z3)-2*x4*(y3*y3)+2*x3*y4*y3-2*x3*(y4*y4)+2*x4*y3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)*(2*(y3*y3)*x2-2*(y3*y3)*x1-2*x3*(y1*y1)+2*x3*y3*y1-4.0*x2*z3*z1-2*x3*y3*y2+2*x2*(z1*z1)-2*x3*z3*z2-4.0*y3*x2*y1-2*x1*z2*z1+2*x3*y2*y1+2*x1*z3*z1+2*x2*(z3*z3)-2*x3*(z1*z1)+2*y3*x1*y2-2*x1*(z3*z3)+2*x3*z3*z1+2*x3*z2*z1+2*y3*x1*y1-2*x1*y2*y1+2*x1*z3*z2+2*x2*(y1*y1))); break;
   case  5: result = -pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5)*(pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(y3*x2*x1-x4*x2*y1+z4*z3*y1+x4*x3*y3+z3*y1*z2-y4*(z3*z3)+y3*z4*z2-2*z3*y2*z1+y4*z3*z2-2*z4*z3*y2+2*x4*x1*y2-2*x4*y3*x1-(x3*x3)*y4-y4*z2*z1-z4*y1*z2+2*z4*y2*z1+y4*z3*z1+x4*y3*x2-2*y3*z4*z1+2*(x3*x3)*y2+x3*y4*x1+x3*x2*y1+2*(z3*z3)*y2-2*y3*z3*z2-y4*x2*x1-(x3*x3)*y1+x3*y4*x2+y3*z4*z3-(z3*z3)*y1+y3*z3*z1+x4*x3*y1-2*x3*x1*y2+x3*y3*x1-2*x3*y3*x2-2*x4*x3*y2+y3*z2*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(2*y4*z4*z3+2*x4*x3*y3-2*x4*y4*x2-2*y4*(z3*z3)+2*y3*z4*z2-2*(x4*x4)*y3+2*(z4*z4)*y2+2*y4*z3*z2+2*x4*x3*y4-4.0*z4*z3*y2-2*(x3*x3)*y4+2*x4*y3*x2+2*(x3*x3)*y2-2*y4*z4*z2+2*(z3*z3)*y2-2*y3*z3*z2-2*y3*(z4*z4)+2*x3*y4*x2+2*y3*z4*z3+2*(x4*x4)*y2-2*x3*y3*x2-4.0*x4*x3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*(2*y3*x2*x1+2*z3*y1*z2-4.0*z3*y2*z1+2*(x1*x1)*y2+2*y2*(z1*z1)-2*x2*x1*y1+2*z3*y1*z1+2*(x3*x3)*y2+2*x3*x2*y1+2*(z3*z3)*y2-2*y3*z3*z2-2*(x3*x3)*y1-2*y3*(x1*x1)-2*y3*(z1*z1)-2*(z3*z3)*y1+2*y3*z3*z1-4.0*x3*x1*y2+2*x3*y3*x1-2*x3*y3*x2-2*y1*z2*z1+2*x3*x1*y1+2*y3*z2*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)); break;
   case  6: result = -(-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*(2*x3*x2*z1-4.0*y3*y1*z2+2*y3*y2*z1-2*(y3*y3)*z1-4.0*x3*x1*z2-2*(x3*x3)*z1-2*z3*(y1*y1)+2*x2*x1*z3+2*y3*z3*y1-2*(x1*x1)*z3+2*y3*y1*z1-2*y3*z3*y2+2*(x3*x3)*z2+2*x3*x1*z1+2*(y3*y3)*z2+2*z3*y2*y1+2*x3*x1*z3-2*x3*x2*z3+2*(x1*x1)*z2-2*y2*y1*z1+2*(y1*y1)*z2-2*x2*x1*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)+(x3*x2*z1-2*y3*y1*z2+y3*y2*z1-2*x4*x3*z2+x3*x2*z4-2*y4*y3*z2-(y3*y3)*z1-2*x3*x1*z2-(x3*x3)*z1-2*x4*x1*z3-(x3*x3)*z4-(y3*y3)*z4+x2*x1*z3+y3*z3*y1+x4*x3*z1+x4*x2*z3-2*y3*z3*y2+x3*x1*z4+2*(x3*x3)*z2+y4*y3*z1+2*(y3*y3)*z2-x4*x2*z1+x4*x3*z3+z3*y2*y1-y4*y2*z1+2*y4*y1*z2+2*x4*x1*z2+x3*x1*z3+y4*y3*z3-2*x3*x2*z3+y4*z3*y2-z4*y2*y1+y3*z4*y2-2*y4*z3*y1-x2*x1*z4+y3*z4*y1)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(-4.0*x4*x3*z2+2*x3*x2*z4-4.0*y4*y3*z2+2*(y4*y4)*z2-2*(x3*x3)*z4+2*(x4*x4)*z2-2*(y3*y3)*z4+2*x4*x3*z4+2*x4*x2*z3+2*y4*y3*z4-2*y3*z3*y2-2*y4*z4*y2+2*(x3*x3)*z2+2*(y3*y3)*z2-2*x4*x2*z4+2*x4*x3*z3-2*(x4*x4)*z3-2*(y4*y4)*z3+2*y4*y3*z3-2*x3*x2*z3+2*y4*z3*y2+2*y3*z4*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5))*pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5); break;
   case  7: result = -(pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(-2*x2*z3*z2+x4*y2*y1+y4*x2*y2+x4*z3*z2+2*x3*y4*y1+x2*y2*y1+2*x3*(y2*y2)+x2*z4*z3-2*x3*z4*z2-2*x3*y4*y2-2*y4*x2*y1+x1*z4*z2-x4*z3*z1+y4*y3*x2-x4*(y2*y2)+x2*z3*z1-x1*(z2*z2)+2*x3*z4*z1+x2*z2*z1-y4*y3*x1+y4*x1*y2+x4*z2*z1+y3*x2*y1-2*x3*y2*y1-x1*(y2*y2)-x4*(z2*z2)-2*y3*x2*y2+x2*z4*z2+y3*x1*y2-x4*y3*y1-x1*z4*z3+2*x3*(z2*z2)-2*x3*z2*z1-2*x2*z4*z1+x1*z3*z2+x4*y3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(-2*x2*z3*z2+2*y4*x2*y2+2*x4*z3*z2+2*x3*(y2*y2)+2*x2*z4*z3-2*x4*z4*z3-4.0*x3*z4*z2-4.0*x3*y4*y2-2*x4*y4*y3+2*y4*y3*x2-2*x4*(y2*y2)-2*(y4*y4)*x2-2*x2*(z4*z4)+2*x3*(z4*z4)+2*x4*y4*y2+2*x4*z4*z2-2*x4*(z2*z2)-2*y3*x2*y2+2*x2*z4*z2+2*x3*(y4*y4)+2*x3*(z2*z2)+2*x4*y3*y2)*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*(-2*x2*z3*z2+2*x2*y2*y1+2*x3*(y2*y2)+2*x3*(y1*y1)+2*x2*z3*z1-2*x1*(z2*z2)+2*x2*z2*z1-2*x2*(z1*z1)+2*y3*x2*y1+2*x1*z2*z1-4.0*x3*y2*y1-2*x1*(y2*y2)-2*x1*z3*z1-2*y3*x2*y2+2*x3*(z1*z1)+2*y3*x1*y2+2*x3*(z2*z2)-4.0*x3*z2*z1-2*y3*x1*y1+2*x1*y2*y1+2*x1*z3*z2-2*x2*(y1*y1))*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5))*pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5); break;
   case  8: result = -pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5)*(pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(z4*y2*z2-2*y3*x2*x1+x4*x2*y1-z4*z3*y1+z3*y1*z2-2*y3*z4*z2+z3*y2*z1+y4*z3*z2+x4*x2*y2+z4*z3*y2+y2*z2*z1-2*x4*x1*y2+2*x4*y3*x1+y4*z2*z1+z4*y1*z2-2*z4*y2*z1+x2*x1*y2-(x2*x2)*y1-y1*(z2*z2)-y4*z3*z1-2*x4*y3*x2-2*z3*y2*z2+2*y3*z4*z1-x3*y4*x1+x3*x2*y1+2*y3*(x2*x2)+y4*x2*x1-2*x3*x2*y2+x3*y4*x2-y4*(z2*z2)-y4*(x2*x2)-x4*x3*y1+x3*x1*y2+2*y3*(z2*z2)+x4*x3*y2-2*y3*z2*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(2*z4*y2*z2-2*y4*z4*z3+2*x4*y4*x2-4.0*y3*z4*z2+2*(x4*x4)*y3-2*(z4*z4)*y2+2*y4*z3*z2+2*x4*x2*y2-2*x4*x3*y4+2*z4*z3*y2-4.0*x4*y3*x2-2*z3*y2*z2+2*y4*z4*z2+2*y3*(x2*x2)-2*x3*x2*y2+2*y3*(z4*z4)+2*x3*y4*x2-2*y4*(z2*z2)-2*(x4*x4)*y2-2*y4*(x2*x2)+2*y3*(z2*z2)+2*x4*x3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*(-4.0*y3*x2*x1+2*z3*y1*z2+2*z3*y2*z1-2*(x1*x1)*y2+2*y2*z2*z1+2*x2*x1*y2-2*(x2*x2)*y1-2*y1*(z2*z2)-2*y2*(z1*z1)+2*x2*x1*y1-2*z3*y2*z2-2*z3*y1*z1+2*x3*x2*y1+2*y3*(x2*x2)+2*y3*(x1*x1)-2*x3*x2*y2+2*y3*(z1*z1)+2*x3*x1*y2+2*y1*z2*z1+2*y3*(z2*z2)-2*x3*x1*y1-4.0*y3*z2*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)); break;
   case  9: result = -pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5)*(-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-1.5)*(2*z3*(y2*y2)+2*x3*x2*z1+2*y3*y1*z2+2*y3*y2*z1+2*x3*x1*z2+2*z3*(y1*y1)+2*(x2*x2)*z3-4.0*x2*x1*z3-2*y3*y2*z2+2*(x1*x1)*z3-2*y3*y1*z1-2*x3*x2*z2-2*x3*x1*z1+2*x2*x1*z2-4.0*z3*y2*y1+2*y2*y1*z2-2*(x1*x1)*z2+2*y2*y1*z1-2*(x2*x2)*z1-2*(y1*y1)*z2+2*x2*x1*z1-2*(y2*y2)*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*(2*z3*(y2*y2)+2*x4*x3*z2+2*x3*x2*z4+2*y4*y3*z2-2*(y4*y4)*z2+2*(x2*x2)*z3-2*(x4*x4)*z2-2*x4*x3*z4-2*y3*y2*z2-4.0*x4*x2*z3-2*x3*x2*z2-2*y4*y3*z4+2*y4*z4*y2+2*x4*x2*z4+2*(x4*x4)*z3+2*(y4*y4)*z3-2*z4*(y2*y2)+2*x4*x2*z2-4.0*y4*z3*y2+2*y3*z4*y2-2*(x2*x2)*z4+2*y4*y2*z2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)+(2*z3*(y2*y2)+x3*x2*z1+y3*y1*z2+y3*y2*z1+x4*x3*z2+x3*x2*z4+y4*y3*z2+x3*x1*z2+2*(x2*x2)*z3+2*x4*x1*z3-2*x2*x1*z3-2*y3*y2*z2-x4*x3*z1-2*x4*x2*z3-2*x3*x2*z2-x3*x1*z4-y4*y3*z1+x4*x2*z1+x2*x1*z2-2*z3*y2*y1+y4*y2*z1-2*y4*y1*z2-2*x4*x1*z2-z4*(y2*y2)+y2*y1*z2+x4*x2*z2-2*y4*z3*y2+z4*y2*y1+y3*z4*y2+2*y4*z3*y1+x2*x1*z4-(x2*x2)*z1-(x2*x2)*z4-y3*z4*y1-(y2*y2)*z1+y4*y2*z2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)); break;
   case 10: result = -pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5)*(pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(x2*z3*z2-(y3*y3)*x2-x2*y2*y1-x3*(y2*y2)+(y3*y3)*x1-x3*y3*y1+x2*z3*z1+x1*(z2*z2)-x2*z2*z1+x3*y3*y2+x3*z3*z2+y3*x2*y1+x3*y2*y1+x1*(y2*y2)-x2*(z3*z3)+y3*x2*y2-2*y3*x1*y2+x1*(z3*z3)-x3*z3*z1-x3*(z2*z2)+x3*z2*z1-2*x1*z3*z2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(2*x2*z3*z2-2*(y3*y3)*x2-2*y4*x2*y2-4.0*x4*z3*z2-2*x3*(y2*y2)+2*x2*z4*z3+2*x4*(z3*z3)+2*x3*z4*z2+2*x3*y4*y2+2*y4*y3*x2+2*x4*(y2*y2)+2*x3*y3*y2+2*x3*z3*z2-2*x3*z4*z3+2*x4*(z2*z2)-2*x2*(z3*z3)+2*x4*(y3*y3)+2*y3*x2*y2-2*x2*z4*z2-2*x3*y4*y3-2*x3*(z2*z2)-4.0*x4*y3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)); break;
   case 11: result = -pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5)*(-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(-2*z4*y2*z2-2*x4*x3*y3+2*y4*(z3*z3)+2*y3*z4*z2-4.0*y4*z3*z2-2*x4*x2*y2+2*z4*z3*y2+2*(x3*x3)*y4+2*x4*y3*x2+2*z3*y2*z2-2*(x3*x3)*y2-2*(z3*z3)*y2-2*y3*(x2*x2)+2*y3*z3*z2+2*x3*x2*y2-4.0*x3*y4*x2-2*y3*z4*z3+2*y4*(z2*z2)+2*y4*(x2*x2)+2*x3*y3*x2-2*y3*(z2*z2)+2*x4*x3*y2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5)+pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(y3*x2*x1-2*z3*y1*z2+z3*y2*z1-y2*z2*z1-x2*x1*y2+(x2*x2)*y1+y1*(z2*z2)+z3*y2*z2-(x3*x3)*y2-2*x3*x2*y1-(z3*z3)*y2-y3*(x2*x2)+y3*z3*z2+(x3*x3)*y1+x3*x2*y2+(z3*z3)*y1-y3*z3*z1+x3*x1*y2-x3*y3*x1+x3*y3*x2-y3*(z2*z2)+y3*z2*z1)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)); break;
   case 12: result = -((-z3*(y2*y2)-2*x3*x2*z1+y3*y1*z2-2*y3*y2*z1+(y3*y3)*z1+x3*x1*z2+(x3*x3)*z1-(x2*x2)*z3+x2*x1*z3-y3*z3*y1+y3*y2*z2+x3*x2*z2+y3*z3*y2-(x3*x3)*z2-(y3*y3)*z2-x2*x1*z2+z3*y2*y1-x3*x1*z3-y2*y1*z2+x3*x2*z3+(x2*x2)*z1+(y2*y2)*z1)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-0.5)-0.5*(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2)*pow(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1),-0.5)*(-2*z3*(y2*y2)+2*x4*x3*z2-4.0*x3*x2*z4+2*y4*y3*z2-2*(x2*x2)*z3+2*(x3*x3)*z4+2*(y3*y3)*z4+2*y3*y2*z2+2*x4*x2*z3+2*x3*x2*z2+2*y3*z3*y2-2*(x3*x3)*z2-2*(y3*y3)*z2-2*x4*x3*z3+2*z4*(y2*y2)-2*y4*y3*z3+2*x3*x2*z3-2*x4*x2*z2+2*y4*z3*y2-4.0*y3*z4*y2+2*(x2*x2)*z4-2*y4*y2*z2)*pow(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2,-1.5))*pow(-pow(x3*y4*x2*y2+y3*z3*y2*z1+(x3*x3)*(z2*z2)+y4*z3*y2*z2+y4*(z3*z3)*y1+x3*x2*y2*y1+(y3*y3)*(z2*z2)+y3*z3*y1*z2-2*x3*x2*z3*z2+y3*z4*z3*y2-y4*y3*(x2*x2)-x4*x2*(z3*z3)-x4*x2*y2*y1-2*x3*y4*x2*y1-y4*x2*x1*y2+(x2*x2)*z4*z1-(x3*x3)*z2*z1-y4*(z3*z3)*y2+y3*z4*y2*z2+z4*z3*y2*y1-y4*y2*z2*z1-y3*z4*z3*y1+x3*x2*z4*z3-z4*y2*y1*z2-(y3*y3)*z2*z1+x4*x1*(y2*y2)+x4*x2*z3*z2-z4*z3*(y2*y2)+x3*y4*y3*x2+x3*x2*z3*z1-x2*x1*(z3*z3)-x2*x1*z4*z2-2*y4*z3*y1*z2-(x3*x3)*y2*y1-y4*y3*(z2*z2)-x3*x1*(z2*z2)+x4*x3*y3*y2-2*y3*z3*y2*z2-x4*x2*z2*z1+x4*x1*(z3*z3)+(x2*x2)*(z3*z3)+y4*z3*y2*z1+x3*x1*z4*z2+x4*x2*z3*z1-(z3*z3)*y2*y1+y3*y2*z2*z1+y3*x2*x1*y2-y3*y1*(z2*z2)-2*y3*z4*y2*z1-y3*(x2*x2)*y1+x3*x2*z2*z1+x3*y4*x1*y2+y3*z4*y1*z2-x3*y4*y3*x1-x4*x3*(z2*z2)-x4*x3*y3*y1+y4*y3*x2*x1+(y3*y3)*(x2*x2)-x4*x3*(y2*y2)+x3*y3*x2*y1+x4*y3*x2*y2+y4*y3*z2*z1-x4*(y3*y3)*x2-(x2*x2)*z3*z1+x4*x3*y2*y1+x3*x2*z4*z2-2*x3*y3*x2*y2+x4*y3*x2*y1+x4*(y3*y3)*x1+(x3*x3)*z4*z1-x3*x1*(y2*y2)+(y3*y3)*z4*z1-y4*y3*z3*z1+z4*(y2*y2)*z1+x4*x3*z3*z2-x3*x1*z4*z3+x4*x1*(z2*z2)-(y3*y3)*x2*x1-z3*(y2*y2)*z1+x2*x1*z4*z3-2*x4*x1*z3*z2+x3*y3*x1*y2+y4*(x2*x2)*y1+z3*y2*y1*z2+(x3*x3)*y4*y1+y4*y1*(z2*z2)+x4*x3*z2*z1+x3*x1*z3*z2+(z3*z3)*(y2*y2)-x4*x3*z3*z1+x2*x1*z3*z2-(y3*y3)*z4*z2+y4*y3*z3*z2-(x2*x2)*z4*z3-(x3*x3)*y4*y2-2*x3*x2*z4*z1-(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*x4*y3*x1*y2,2)*(2*y3*z3*y2*z1+(x3*x3)*(z2*z2)+2*x3*x2*y2*y1+(y3*y3)*(z2*z2)+2*y3*z3*y1*z2-2*x3*x2*z3*z2+(x2*x2)*(y1*y1)+(x1*x1)*(z3*z3)-2*y3*(x1*x1)*y2-2*(x3*x3)*z2*z1-2*(y3*y3)*z2*z1-2*(x1*x1)*z3*z2+(y3*y3)*(x1*x1)+(x1*x1)*(y2*y2)+2*x3*x2*z3*z1-2*x2*x1*(z3*z3)-2*(x3*x3)*y2*y1+(y3*y3)*(z1*z1)-2*x3*x1*(z2*z2)-2*y3*z3*y1*z1+(x3*x3)*(z1*z1)-2*y3*z3*y2*z2+2*y3*x2*x1*y1+(x2*x2)*(z3*z3)-2*(z3*z3)*y2*y1+2*y3*y2*z2*z1+2*y3*x2*x1*y2-2*y3*y1*(z2*z2)-2*y3*(x2*x2)*y1-2*x3*x2*(z1*z1)+2*x3*x2*z2*z1-2*y3*y2*(z1*z1)+(y3*y3)*(x2*x2)+2*z3*y2*y1*z1+2*x3*x1*z2*z1+(y1*y1)*(z2*z2)+2*x3*y3*x2*y1+(y2*y2)*(z1*z1)-2*x2*x1*z2*z1-2*(x2*x2)*z3*z1+(x2*x2)*(z1*z1)-2*x3*y3*x2*y2-2*x3*x1*(y2*y2)+2*x2*x1*z3*z1-2*y2*y1*z2*z1+(x1*x1)*(z2*z2)-2*x3*x1*z3*z1-2*(y3*y3)*x2*x1-2*z3*(y1*y1)*z2+2*y3*y1*z2*z1-2*z3*(y2*y2)*z1+(z3*z3)*(y1*y1)+(x3*x3)*(y1*y1)+2*x3*y3*x1*y2+2*z3*y2*y1*z2+2*x3*x1*z3*z2+(z3*z3)*(y2*y2)+2*x2*x1*z3*z2-2*x2*x1*y2*y1+2*x3*x1*y2*y1+(x3*x3)*(y2*y2)-2*x3*y3*x1*y1-2*x3*x2*(y1*y1))*(2*x4*x3*y4*y2+2*x3*y4*x2*y2+(x3*x3)*(z2*z2)+2*y4*z3*y2*z2+2*x4*x3*z4*z2+(y3*y3)*(z2*z2)-2*x3*x2*z3*z2+2*y3*z4*z3*y2+2*x4*x2*z4*z3-2*y4*y3*(x2*x2)-2*x4*x2*(z3*z3)-2*x4*y4*x2*y2+(y4*y4)*(x2*x2)-2*y4*(z3*z3)*y2+2*y3*z4*y2*z2-2*(x4*x4)*y3*y2+2*x3*x2*z4*z3-2*y3*(z4*z4)*y2+2*x4*x2*z3*z2+(x3*x3)*(y4*y4)+(x3*x3)*(z4*z4)-2*z4*z3*(y2*y2)+2*y4*z4*z3*y2+2*x3*y4*y3*x2+(x4*x4)*(z2*z2)+(y3*y3)*(z4*z4)-2*x3*(y4*y4)*x2-2*y4*y3*(z2*z2)+2*y4*y3*z4*z2+2*x4*x3*y3*y2-2*y3*z3*y2*z2+(y4*y4)*(z2*z2)+(z4*z4)*(y2*y2)+(x4*x4)*(y3*y3)+(x2*x2)*(z3*z3)+2*x4*y4*y3*x2-2*x3*x2*(z4*z4)-2*y4*z4*y2*z2-2*x4*x3*(z2*z2)+(y3*y3)*(x2*x2)-2*x4*x2*z4*z2+(x2*x2)*(z4*z4)-2*x4*x3*(y2*y2)+2*x4*y3*x2*y2-2*x4*(y3*y3)*x2-2*x4*x3*z4*z3+2*x3*x2*z4*z2-2*x3*y3*x2*y2+(x4*x4)*(y2*y2)+2*x4*x3*z3*z2+(y4*y4)*(z3*z3)-2*y4*y3*z4*z3+(x4*x4)*(z3*z3)-2*(x4*x4)*z3*z2+(z3*z3)*(y2*y2)-2*(y3*y3)*z4*z2+2*y4*y3*z3*z2-2*(x2*x2)*z4*z3-2*x4*x3*y4*y3-2*(x3*x3)*y4*y2-2*(x3*x3)*z4*z2+(x3*x3)*(y2*y2)-2*(y4*y4)*z3*z2)+1,-0.5); break;
   default: BOOST_FAIL( "Bad index." );
 };
 result *= ( fcmp(sign) > 0 ? +1 : -1);
 return result;
}


double __CALC_ANG(int i, const t_point& v1, const t_point& v2, const t_point& v3) {
   double x1=v1(0),x2=v2(0),x3=v3(0),
         y1=v1(1),y2=v2(1),y3=v3(1),
         z1=v1(2),z2=v2(2),z3=v3(2),result;
// check zero-vectors
   BOOST_CHECK ( 
        (vcmp(v1) != v2) &&
        (vcmp(v2) != v3) &&
        (vcmp(v1) != v3)
      );
// calculate
   switch (i) {
     case 0: result = acos(pow((z2*z2)+(y3*y3)+(x2*x2)-2*y3*y2-2*z3*z2+(z3*z3)+(x3*x3)+(y2*y2)-2*x3*x2,-0.5)*pow(-2*x2*x1+(z2*z2)+(x2*x2)+(x1*x1)+(z1*z1)-2*y2*y1+(y2*y2)-2*z2*z1+(y1*y1),-0.5)*(-x2*x1+(z2*z2)+y3*y1+(x2*x2)-y3*y2-z3*z2-y2*y1+z3*z1+(y2*y2)+x3*x1-x3*x2-z2*z1)); break;
     case 1: result = 
     (
          (x2-x3)/
                sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))/
                sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                
            -
          ( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2))* (x1-x2)
          /
          ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))*
            pow(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2), 1.5)
          )
     )/       
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      );         
        break;
     case 2: result = 
     -     (
                ( ( (y2-y3)*(y1-y2) + (x2-x3)*(x1-x2) - (z3-z2)*(z1-z2))*(y1-y2)
                )/
                (  sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                   pow((x1-x2,2)+(z1-z2,2)+pow(y1-y2,2), 1.5)
                )
          -     (y2-y3)/
                ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))*
                  sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                )
           )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      );     
      break;
     case 3: result = 
     -     (
                  (z3-z2)/
                  (  sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                     sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
            +     ( ( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2))*(z1-z2)
                  )/
                  (  sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                    pow(pow(x1-x2,2)+(z1-z2,2)+(y1-y2,2), 1.5)
                  )
           )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      );     
      break;     
     case 4: result = 
          (
                 (x1-2*x2+x3)/
                 ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                   sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                 )
          +      ( ( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2))*(x1-x2)
                 )/
                 ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                   pow(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2), 1.5)
                 )
          -      ( ( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2))*(x2-x3)
                 )/
                 ( pow(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2),2) *
                   sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                 )
          )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      );     
      break;       
     case 5: result = 
     -     (
            -     ( ( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)- (z3-z2)*(z1-z2)) *(y1-y2)
                  )/
                  ( sqrt( pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))*
                    pow(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2),1.5)
                  )
            +     ( (y2-y3)* ( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2))
                  )/
                  ( pow(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2),1.5)*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
            -     (y1-2*y2+y3)/
                  ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
           )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      ); 
      break;  
     case 6: result = 
     -     (
            -     ( ( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2)) * (z1-z2)
                  )/
                  ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))*
                    pow(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2),1.5)
                  )
            -     (z3+z1-2*z2)/
                  ( sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2))*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
            -     ( (z3-z2) * ( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2))
                  )/
                  ( pow(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2),1.5)*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
           )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      ); 
      break;
     case 7: result = 
     -     (
                  (x1-x2)/
                  (  sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                     sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
           -     (  ( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2)) * (x2-x3)
                 )/
                 ( pow(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2),1.5)*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                 )
           )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      ); 
      break;
     case 8: result = 
   -     (
               (y1-y2)/
                  (  sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                     sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
         -     ( (y2-y3)*( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2))
               )/
                 ( pow(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2),1.5)*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                 )
         )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      ); 
      break;
     case 9:
   -     (
               (z1-z2)/
                  (  sqrt(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2)) *
                     sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                  )
         -     ( (z2-z3)*( (y2-y3)*(y1-y2)+(x2-x3)*(x1-x2)-(z3-z2)*(z1-z2))
               )/
                 ( pow(pow(y2-y3,2)+pow(z3-z2,2)+pow(x2-x3,2),1.5)*
                    sqrt(pow(x1-x2,2)+pow(z1-z2,2)+pow(y1-y2,2))
                 )
         )/     
      sqrt( 1 
      -  pow( (y2-y3)*(y1-y2)+ (x2-x3)*(x1-x2)- (z3-z2)*(z1-z2) , 2)
          /
          ( pow(y2-y3, 2)+pow(z3-z2,2)+pow(x2-x3,2) ) /
           ( pow(x1-x2, 2)+pow(z1-z2,2)+pow(y1-y2,2) )         
      ); 
      break;
    default: BOOST_ERROR( "Bad index." );
   };
   return result;
}

double __CALC_BOND(int i, const t_point& v1, const t_point& v2) {
   double x1=v1(0),x2=v2(0),
         y1=v1(1),y2=v2(1),
         z1=v1(2),z2=v2(2),result;
// check zero-vectors
   BOOST_CHECK(vcmp(v1) != v2);
   switch (i) {
     case 0: result = sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
     case 1: result = (x1-x2)/sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
     case 2: result = (y1-y2)/sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
     case 3: result = (z1-z2)/sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
     case 4: result = (x2-x1)/sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
     case 5: result = (y2-y1)/sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
     case 6: result = (z2-z1)/sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)+(z1-z2)*(z1-z2)); break;
    default: BOOST_ERROR( "Bad index." );
   };
   return result;
}

}
 
